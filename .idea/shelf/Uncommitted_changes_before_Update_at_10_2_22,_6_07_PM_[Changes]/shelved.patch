Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"f5b0ef67-77df-41d6-b519-5585acf9fcf7\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/assignment/TetrisBoard.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/assignment/TetrisBoard.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2FMojIVwW6WwqHWRhC3zsoAwoCM\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/Users/jimmybao/CS/Java/CS314H/prog4&quot;,\n    &quot;project.structure.last.edited&quot;: &quot;SDKs&quot;,\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;\n  }\n}</component>\n  <component name=\"RunManager\">\n    <configuration name=\"JTetris\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"assignment.JTetris\" />\n      <module name=\"prog4\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"assignment.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\n      <module name=\"prog4\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\n      <module name=\"prog4\" />\n      <option name=\"filePath\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.JTetris\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"f5b0ef67-77df-41d6-b519-5585acf9fcf7\" name=\"Changes\" comment=\"\" />\n      <created>1664311448027</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1664311448027</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Finished Tetris Piece class\">\n      <created>1664335936830</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1664335936830</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"finished testMove\">\n      <created>1664417099097</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1664417099097</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Finished constructor\">\n      <created>1664421401234</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1664421401234</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"worked on move function\">\n      <created>1664487762347</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1664487762347</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"fixed some edge cases\">\n      <created>1664498751344</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1664498751344</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"Created functions to decrease repetition, and fixed some bugs\">\n      <created>1664503111530</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1664503111530</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"Removed some bugs and added todo\">\n      <created>1664503448525</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1664503448525</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"Implemented the update of instance variables\">\n      <created>1664512018163</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1664512018164</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"Debugging\">\n      <created>1664513041740</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1664513041740</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"Fixed Floating Issue\">\n      <created>1664666567875</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1664666567875</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"Fixed Drop Height\">\n      <created>1664667482851</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1664667482851</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"12\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Finished Tetris Piece class\" />\n    <MESSAGE value=\"finished testMove\" />\n    <MESSAGE value=\"Finished constructor\" />\n    <MESSAGE value=\"worked on move function\" />\n    <MESSAGE value=\"fixed some edge cases\" />\n    <MESSAGE value=\"Created functions to decrease repetition, and fixed some bugs\" />\n    <MESSAGE value=\"Removed some bugs and added todo\" />\n    <MESSAGE value=\"Implemented the update of instance variables\" />\n    <MESSAGE value=\"Debugging\" />\n    <MESSAGE value=\"Fixed Floating Issue\" />\n    <MESSAGE value=\"Fixed Drop Height\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Fixed Drop Height\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 93e3647fb5fff61e994836e9a60a2a7e2651d5ac)
+++ b/.idea/workspace.xml	(date 1664746901066)
@@ -153,7 +153,14 @@
       <option name="project" value="LOCAL" />
       <updated>1664667482851</updated>
     </task>
-    <option name="localTasksCounter" value="12" />
+    <task id="LOCAL-00012" summary="Implemented Row Clearing">
+      <created>1664670322279</created>
+      <option name="number" value="00012" />
+      <option name="presentableId" value="LOCAL-00012" />
+      <option name="project" value="LOCAL" />
+      <updated>1664670322279</updated>
+    </task>
+    <option name="localTasksCounter" value="13" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -179,6 +186,7 @@
     <MESSAGE value="Debugging" />
     <MESSAGE value="Fixed Floating Issue" />
     <MESSAGE value="Fixed Drop Height" />
-    <option name="LAST_COMMIT_MESSAGE" value="Fixed Drop Height" />
+    <MESSAGE value="Implemented Row Clearing" />
+    <option name="LAST_COMMIT_MESSAGE" value="Implemented Row Clearing" />
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/assignment/TetrisBoard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package assignment;\n\nimport java.awt.*;\n\n/**\n * Represents a Tetris board -- essentially a 2D grid of piece types (or nulls). Supports\n * tetris pieces and row clearing.  Does not do any drawing or have any idea of\n * pixels. Instead, just represents the abstract 2D board.\n */\npublic final class TetrisBoard implements Board {\n\n    // JTetris will use this constructor\n\n    // TODO some kind of issue where only square pieces actually hit the bottom, the rest stay floating one above\n    // skirt issue?\n    // TODO update and implement rows cleared\n    private int width, height, maxHeight, rowsCleared;\n    private Piece[][] board;\n    private int[] blocksFilledPerRow, blocksFilledPerColumn;\n    private Action lastAction;\n    private Result lastResult;\n    private Piece currentPiece;\n    private Point currentPosition;\n\n    public TetrisBoard(int width, int height) {\n        this.width = width;\n        this.height = height;\n        this.maxHeight = 0;\n        this.rowsCleared = 0;\n        this.board = new Piece[width][height];\n        this.blocksFilledPerRow = new int[height];\n        this.blocksFilledPerColumn = new int[width];\n    }\n\n    // Create this board by cloning an old one\n    public TetrisBoard(TetrisBoard oldBoard) {\n        this.width = oldBoard.getWidth();\n        this.height = oldBoard.getHeight();\n        this.maxHeight = oldBoard.getMaxHeight();\n        this.rowsCleared = oldBoard.getRowsCleared();\n        this.board = new Piece[this.width][this.height];\n        for (int i = 0; i < this.width; i++) {\n            for (int j = 0; j < this.height; j++) {\n                this.board[i][j] = oldBoard.board[i][j];\n            }\n        }\n        this.blocksFilledPerRow = new int[this.height];\n        for (int i = 0; i < this.height; i++) {\n            this.blocksFilledPerRow[i] = oldBoard.getRowWidth(i);\n        }\n        this.blocksFilledPerColumn = new int[this.width];\n        for (int i = 0; i < this.width; i++) {\n            this.blocksFilledPerColumn[i] = oldBoard.getColumnHeight(i);\n        }\n    }\n\n    @Override\n    public Result move(Action act) {\n        // TODO implement and set lastResult to the returned result\n        if (currentPiece == null) {\n            lastResult = Result.NO_PIECE;\n            return lastResult;\n        }\n\n        Point[] body = currentPiece.getBody();\n        Point newPosition;\n        switch (act) {\n            case LEFT:\n                newPosition = new Point((int)(currentPosition.getX()) - 1, (int)(currentPosition.getY()));\n                movePieceToNewPosition(body, newPosition);\n                break;\n            case RIGHT:\n                newPosition = new Point((int)(currentPosition.getX()) + 1, (int)(currentPosition.getY()));\n                movePieceToNewPosition(body, newPosition);\n                break;\n            case DOWN:\n                newPosition = new Point((int)(currentPosition.getX()), (int)(currentPosition.getY()) - 1);\n                movePieceToNewPosition(body, newPosition);\n                checkIfPiecePlaced(body);\n                break;\n            case DROP:\n                int height = dropHeight(currentPiece, (int)(currentPosition.getX()));\n                newPosition = new Point((int)(currentPosition.getX()), height);\n                movePieceToNewPosition(body, newPosition);\n                checkIfPiecePlaced(body);\n                break;\n            case CLOCKWISE:\n                // TODO\n                lastResult = Result.OUT_BOUNDS;\n                break;\n            case COUNTERCLOCKWISE:\n                // TODO\n                lastResult = Result.OUT_BOUNDS;\n                break;\n            case HOLD:\n                lastResult = Result.SUCCESS;\n                break;\n            case NOTHING:\n                lastResult = Result.SUCCESS;\n                break;\n        }\n        lastAction = act;\n        return lastResult;\n    }\n\n    private void clearRows() {\n        for (int i = currentPiece.getHeight() - 1; i >= 0; i--) {\n            int y = (int)(currentPosition.getY() + i);\n            // check if this row is cleared by checking if the number of blocks filled equals the width\n                // of the board\n            if (y >= 0 && getRowWidth(y) == getWidth()) {\n                // clear this row\n                for (int x = 0; x < getWidth(); x++) {\n                    if (getGrid(x, y) != null || isPointOnCurrentPiece(new Point(x, y))) {\n                        // shift pieces on top of this block down\n                        blocksFilledPerColumn[x]--;\n                        for (int j = y + 1; j <= getHeight(); j++) {\n                            if (j == getHeight()) {\n                                blocksFilledPerRow[j-1] = 0;\n                                board[x][j - 1] = null;\n                            } else {\n                                blocksFilledPerRow[j-1] = blocksFilledPerRow[j];\n                                board[x][j - 1] = board[x][j];\n                            }\n                            if (getGrid(x, y) == null) break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // check if the piece can be placed\n    private void checkIfPiecePlaced(Point[] body) {\n        // checks if the drop height of the piece already equals the current piece's location. If it does,\n            // that means the piece is placed.\n        if (dropHeight(currentPiece, (int)(currentPosition.getX())) == (int)(currentPosition.getY())) {\n            updateInstanceVariables(body);\n            clearRows();\n            lastResult = Result.PLACE;\n        }\n\n        // checks if the piece can be moved 1 point down. If it cannot, then we cannot move the piece down\n//        Point checkPosition = new Point((int)(currentPosition.getX()), (int)(currentPosition.getY()) - 1);\n//        if (checkPiece(currentPiece, checkPosition) != 0) {\n//            // cannot move the piece down 1\n//            updateInstanceVariables(body);\n//            clearRows();\n//            lastResult = Result.PLACE;\n//        }\n    }\n\n    // TODO dont name this method like this, extremely ambiguous\n    // updates the instance variables for max height and blocks filled per column/row\n    private void updateInstanceVariables(Point[] body) {\n        for (int i = 0; i < body.length; i++) {\n            int x = (int) (currentPosition.getX() + body[i].getX());\n            int y = (int) (currentPosition.getY() + body[i].getY());\n            blocksFilledPerColumn[x] = Math.max(getColumnHeight(x), y + 1);\n            maxHeight = Math.max(getMaxHeight(), y + 1);\n            blocksFilledPerRow[y]++;\n        }\n    }\n\n    // moves the piece to the new position if applicable, and sets the result\n    private void movePieceToNewPosition(Point[] body, Point newPosition) {\n        int result = checkPiece(currentPiece, newPosition);\n        if (result == 0) {\n            // can place the piece in this new position\n\n            // remove the piece from the current position\n            setPiece(null, body, currentPosition);\n\n            // add the piece to the new position\n            setPiece(currentPiece, body, newPosition);\n            currentPosition = newPosition;\n\n            lastResult = Result.SUCCESS;\n        }\n        else {\n            lastResult = Result.OUT_BOUNDS;\n        }\n    }\n\n    @Override\n    public Board testMove(Action act) {\n        Board newBoard = new TetrisBoard(this);\n        newBoard.move(act);\n        return newBoard;\n    }\n\n    @Override\n    public Piece getCurrentPiece() { return this.currentPiece; }\n\n    @Override\n    public Point getCurrentPiecePosition() {\n        return this.currentPosition;\n    }\n\n    @Override\n    public void nextPiece(Piece p, Point spawnPosition) {\n        Point[] body = p.getBody();\n        // throw corresponding error based on result of checkPiece function\n        int result = checkPiece(p, spawnPosition);\n        if (result == 1) {\n            throw new IllegalArgumentException(\"Piece is out of bounds\");\n        }\n        if (result == 2) {\n            throw new IllegalArgumentException(\"Piece intersects with existing piece\");\n        }\n\n        // place the piece if all preconditions are passed\n        setPiece(p, body, spawnPosition);\n\n        this.currentPiece = p;\n        this.currentPosition = spawnPosition;\n    }\n\n    // adds a piece p to the given position. If you want to remove a piece, then a null piece can be passed in\n    private void setPiece(Piece p, Point[] body, Point position) {\n        for (int i = 0; i < body.length; i++) {\n            int x = (int) (position.getX() + body[i].getX());\n            int y = (int) (position.getY() + body[i].getY());\n            board[x][y] = p;\n        }\n    }\n\n    // checks whether a piece p can be placed in the given position\n        // returns integer: 0 means it works, 1 means piece is out of bounds, 2 means piece intersects\n    private int checkPiece(Piece p, Point position) {\n        Point[] body = p.getBody();\n        // make sure the piece is in bounds and does not intersect\n        for (int i = 0; i < body.length; i++) {\n            int currentPointX = (int)(position.getX() + body[i].getX());\n            int currentPointY = (int)(position.getY() + body[i].getY());\n\n            // point is out of bounds\n            if (outOfBounds(currentPointX, currentPointY)) {\n                return 1;\n            }\n\n            // point is already occupied by a piece (excluding the current piece)\n            if (getGrid(currentPointX, currentPointY) != null) {\n                return 2;\n            }\n        }\n        return 0;\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        // Ignore objects which aren't also tetris boards.\n        if(!(other instanceof TetrisBoard)) return false;\n        TetrisBoard otherBoard = (TetrisBoard) other;\n\n        for (int i = 0; i < height; i++) {\n            for (int j = 0; j < width; j++) {\n                if (!this.board[i][j].equals(otherBoard.board[i][j])) {\n                    return false;\n                }\n            }\n        }\n\n        // ensure they have the same current piece at the same location\n        return (this.getCurrentPiece().equals(otherBoard.getCurrentPiece())) && (this.getCurrentPiecePosition().equals(otherBoard.getCurrentPiecePosition()));\n    }\n\n    @Override\n    public Result getLastResult() { return this.lastResult; }\n\n    @Override\n    public Action getLastAction() { return this.lastAction; }\n\n    @Override\n    public int getRowsCleared() { return this.rowsCleared; }\n\n    @Override\n    public int getWidth() { return this.width; }\n\n    @Override\n    public int getHeight() { return this.height; }\n\n    @Override\n    public int getMaxHeight() { return this.maxHeight; }\n\n    @Override\n    public int dropHeight(Piece piece, int x) {\n        int dropY = 0;\n        int[] skirt = piece.getSkirt();;\n        for (int i = 0; i < skirt.length; i++) {\n            // The drop height will depend on each element in the skirt array with the respective\n                // height the piece needs to go down at this index\n            if (skirt[i] != Integer.MAX_VALUE) {\n                int y = (int) (currentPosition.getY() + skirt[i]);\n\n                for (int j = y; j >= 0; j--) {\n                    if (getGrid(x + i, j) != null) {\n                        // there exists a piece at this index (x, j), therefore can move it to height j+1\n                        dropY = Math.max(dropY, j + 1 - skirt[i]);\n                        break;\n                    }\n                }\n            }\n        }\n        return dropY;\n    }\n\n    @Override\n    public int getColumnHeight(int x) {\n        return this.blocksFilledPerColumn[x];\n    }\n\n    @Override\n    public int getRowWidth(int y) {\n        return this.blocksFilledPerRow[y];\n    }\n\n    // determine whether a point is on the current piece\n    private boolean isPointOnCurrentPiece(Point toCheck) {\n        if (currentPiece == null || currentPosition == null || toCheck == null) {\n            return false;\n        }\n\n        for (Point p : currentPiece.getBody()) {\n            Point realCurrentPoint = new Point((int) (p.getX() + currentPosition.getX()), (int) (p.getY() + currentPosition.getY()));\n            if (realCurrentPoint.equals(toCheck)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    @Override\n    public Piece.PieceType getGrid(int x, int y) {\n        if (outOfBounds(x, y) || this.board[x][y] == null || isPointOnCurrentPiece(new Point(x, y))) {\n            return null;\n        } else {\n            return this.board[x][y].getType();\n        }\n    }\n\n    private boolean outOfBounds(int x, int y) {\n        return x < 0 || y < 0 || x >= getWidth() || y >= getHeight();\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/assignment/TetrisBoard.java b/src/main/java/assignment/TetrisBoard.java
--- a/src/main/java/assignment/TetrisBoard.java	(revision 93e3647fb5fff61e994836e9a60a2a7e2651d5ac)
+++ b/src/main/java/assignment/TetrisBoard.java	(date 1664743840637)
@@ -286,7 +286,7 @@
     @Override
     public int dropHeight(Piece piece, int x) {
         int dropY = 0;
-        int[] skirt = piece.getSkirt();;
+        int[] skirt = piece.getSkirt();
         for (int i = 0; i < skirt.length; i++) {
             // The drop height will depend on each element in the skirt array with the respective
                 // height the piece needs to go down at this index
